MODULE DOCUMENTATION:


The information about what to render on the webpage is stored in the many tables of the database.
When a database is queried for this information, an array of results is returned to the server.

To use this array directly for rendering the content of the webpage would however be impractical
and it is makes much more sense to turn this array into semantically meaningful javascript objects.

However, many of those javascript objects will be very similar and share the same structure,
thus it is optimal to categorise them and sort them into several groups based on their structure.

In order to quickly create many similar javascript objects, a model can be built for each group.
The purpose of this module is to export an object containing all of those different models.

Each renderable javascript object is populated with data coming from the database.
A database query returns an array containing all data in a particular table.

Each element in the array corresponds to the data used to create one single renderable javascript object.
Thus, every model must have access to both the array from the database (result) and the correct iterator (iterator).

To create these models, it is convenient to use constructor functions, which can be found in modelConstructors.js.



In reality each of these models will be used to create not one but many renderable javascript objects.
The next step would be to create a function that takes in one particular model,
has knowledge about which objects will be created using this model, and compiles them into one larger container object.
A model for a single renderable javascript object would then become a named property on this container object.

This function can be found in modelCompiler.js.


The compiler function needs to know, what kind of container object to output or what are the keys and what are the values of this object.
When the function is run, a specific model is passed in as an argument. This model will provide the values.
The keys however have to be imported from another module called keyArrays.js.


To make the compiler function actually work, a specific database result array has to be passed in.
The function for that is located in queryDatabase.js.
This is an asynchronous function, so the await keyword has to be used, when it is called.


To make the database query, there has to connection to the database.
This is established in databaseConnection.js.
